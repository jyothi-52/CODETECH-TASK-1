import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split

def extract_data(file_path):
    df = pd.read_csv(file_path)
    return df


def transform_data(df):
   
    num_features = df.select_dtypes(include=['int64', 'float64']).columns
    cat_features = df.select_dtypes(include=['object']).columns
    
    
    num_transformer = Pipeline([
        ('imputer', SimpleImputer(strategy='mean')),
        ('scaler', StandardScaler())
    ])
    
    cat_transformer = Pipeline([
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('encoder', OneHotEncoder(handle_unknown='ignore'))
    ])
    
   
    preprocessor = ColumnTransformer([
        ('num', num_transformer, num_features),
        ('cat', cat_transformer, cat_features)
    ])
    
    transformed_data = preprocessor.fit_transform(df)
    return transformed_data, preprocessor


def load_data(transformed_data, output_file):
    pd.DataFrame(transformed_data).to_csv(output_file, index=False)
    print(f'Transformed data saved to {output_file}')


def etl_pipeline(input_file, output_file):
    df = extract_data(input_file)
    transformed_data, _ = transform_data(df)
    load_data(transformed_data, output_file)


if __name__ == "__main__":
    input_file = 'raw_data.csv'  
    output_file = 'processed_data.csv'
    etl_pipeline(input_file, output_file)
